
- hosts:  ['DockerHost', 'HoneySMB', 'Cowrie-SSH', 'Cowrie-Telnet', 'Cowrie-SSH-Telnet', 'TelnetLogger', 'pythonftp']
  become: true
  vars:
    folder_path: /opt/Honeypot-Logs
    local_output_path: ../
  tasks:
  - name: Make directory for logs to be located within
    file: 
        path: /opt/Honeypot-Logs/
        state: directory
        mode: 0776

  - name: Pulling HoneySMB Logs out of the container
    shell: "docker cp Honeypot-SMB:/home/smb/ /opt/Honeypot-Logs/HoneySMB/ "
    ignore_errors: true
  - name: Pulling Cowrie SSH Logs out of the container
    shell: "docker cp Honeypot-SSH-Cowrie:/cowrie/var/log/cowrie /opt/Honeypot-Logs/Honeypot-SSH-Cowrie; docker cp Honeypot-SSH-Cowrie:/cowrie/var/lib/cowrie /opt/Honeypot-Logs/Honeypot-SSH-Cowrie"
    ignore_errors: true
  - name: Pulling Cowrie Telnet Logs out of the container
    shell: "docker cp Honeypot-Telnet-Cowrie:/cowrie/var/log/cowrie /opt/Honeypot-Logs/Honeypot-Telnet-Cowrie; docker cp Honeypot-Telnet-Cowrie:/cowrie/var/lib/cowrie /opt/Honeypot-Logs/Honeypot-Telnet-Cowrie "
    ignore_errors: true
  - name: Pulling Cowrie SSH Telnet Logs out of the container
    shell: "docker cp Honeypot-SSH-Telnet-Cowrie:/cowrie/var/log/cowrie /opt/Honeypot-Logs/Honeypot-SSH-Telnet-Cowrie ; docker cp Honeypot-SSH-Telnet-Cowrie:/cowrie/var/lib/cowrie /opt/Honeypot-Logs/Honeypot-SSH-Telnet-Cowrie "
    ignore_errors: true
  - name: Pulling TelnetLogger Logs out of the container
    shell: "docker cp Honeypot-Telnet-telnetLogger:/opt/logs/ /opt/Honeypot-Logs/Honeypot-Telnet-telnetLogger/"
    ignore_errors: true
  - name: Pulling Python FTP Logs out of the container
    shell: "docker cp Honeypot-FTP-Python-FTP:/opt/ /opt/Honeypot-Logs/Honeypot-FTP-Python-FTP/"
    ignore_errors: true

  - name: Get Files to tranfer
    shell:  "find -L {{ folder_path }} ! -type d 2>/dev/null"
    register: file_paths
  - debug:
      msg: "{{ file_paths.stdout_lines }}"

  - name: fetch files
    fetch:
      src: "{{ item }}"
      dest: "{{ local_output_path }}/{{ ansible_hostname }}/{{ item }}"
      flat: yes
    loop: "{{ file_paths.stdout_lines|flatten(levels=1)  }}"
    
  - name: Get Containers Details    
    shell: docker ps -a
    register: Output
  - name: Display Container Status's
    debug: var=Output.stdout_lines
